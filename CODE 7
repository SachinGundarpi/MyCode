import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class JsonComparator {

    public static void main(String[] args) {
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            // Read JSON files
            JsonNode node1 = objectMapper.readTree(new File("file1.json"));
            JsonNode node2 = objectMapper.readTree(new File("file2.json"));

            // Flatten JSON structures
            Map<String, String> flat1 = flattenJson(node1);
            Map<String, String> flat2 = flattenJson(node2);

            // Compare flattened JSON
            compareJson(flat1, flat2);
            System.out.println("JSON files comparison completed.");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

   private static Map<String, String> flattenJson(JsonNode node) {
    Map<String, String> flatJson = new HashMap<>();
    flattenJson("$", node, flatJson); // Use "$" as the initial path
    return flatJson;
}


    private static void flattenJson(String prefix, JsonNode node, Map<String, String> flatJson) {
        if (node.isObject()) {
            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> entry = fields.next();
                flattenJson(prefix + (prefix.isEmpty() ? "" : ".") + entry.getKey(), entry.getValue(), flatJson);
            }
        } else if (node.isArray()) {
            for (int i = 0; i < node.size(); i++) {
                flattenJson(prefix + "[" + i + "]", node.get(i), flatJson);
            }
        } else if (node.isValueNode()) {
            flatJson.put(prefix, node.asText());
        }
    }

private static void compareJson(Map<String, String> flat1, Map<String, String> flat2) {
    for (String key : flat1.keySet()) {
        if (!flat2.containsKey(key)) {
            System.out.println(key);
        }
    }

    for (String key : flat2.keySet()) {
        if (!flat1.containsKey(key)) {
            System.out.println(key);
        }
    }
}


}
